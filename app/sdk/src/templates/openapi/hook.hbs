import { useEffect, useState } from 'react'
import { RequestParameters, ResponseMap } from '../types/{{h__change-case @root.fileNamingStyle (h__get-safe-operation-name pathname method operation)}}'
import { {{h__get-safe-operation-name pathname method operation}} } from '../operations/{{h__change-case @root.fileNamingStyle (h__get-safe-operation-name pathname method operation)}}'


export interface Use{{h__change-case "pascalCase" (h__get-safe-operation-name pathname method operation)}}<STATUS extends keyof ResponseMap> {
  value: ResponseMap[STATUS] | undefined
  error: Error | undefined
  loading: boolean
}

{{> t_comments operation}}
export function use{{h__change-case "pascalCase" (h__get-safe-operation-name pathname method operation)}}<STATUS extends keyof ResponseMap>(args?: RequestParameters, deps?: any[])
export function use{{h__change-case "pascalCase" (h__get-safe-operation-name pathname method operation)}}<STATUS extends keyof ResponseMap>(deps?: any[])
export function use{{h__change-case "pascalCase" (h__get-safe-operation-name pathname method operation)}}<STATUS extends keyof ResponseMap>(argsOrDeps?: RequestParameters | any[] | undefined, deps?: any[]) {
  let args: RequestParameters | undefined
  let dependencies: any[]

  if (Array.isArray(argsOrDeps)) {
    args = undefined
    dependencies = argsOrDeps || []
  } else {
    args = argsOrDeps
    dependencies = deps || []
  }

  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [value, setValue] = useState<ResponseMap[STATUS] | undefined>()

  useEffect(() => {
    setLoading(true)

    {{h__get-safe-operation-name pathname method operation}}(args)
      .then((response) => {
        setValue(response)
        setLoading(false)
      })
      .catch((error) => {
        setError(error)
        setLoading(false)
      })
  }, [dependencies])

  return {
    value,
    error,
    loading: loading,
  }
}
